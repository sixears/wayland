# https://wiki.archlinux.org/title/Xorg/Keyboard_configuration
# https://wiki.archlinux.org/title/X_keyboard_extension

# To output current map: xkbcomp $DISPLAY -

# In principle, you can reload a file with xkbcomp FILENAME $DISPLAY; but this
# probably won't work appropriately on wayland; use sway-reload for that

xkb_keymap {
##  xkb_keycodes {
##    minimum = 8;
##    maximum = 255;
##
##    # --------------------------------------------------------
##
##    <ESC>  =   9;
##    <FK01> =  67;
##    <FK02> =  68;
##    <FK03> =  69;
##    <FK04> =  70;
##    <FK05> =  71;
##    <FK06> =  72;
##    <FK07> =  73;
##    <FK08> =  74;
##    <FK09> =  75;
##    <FK10> =  76;
##    <FK11> =  95;
##    <FK12> =  96;
##
##    # ------------------------------------
##
##    <HOME> = 110;
##    <END>  = 115;
##    <INS>  = 118;
##    <DELE> = 119;
##
##    # --------------------------------------------------------
##
##    <MUTE> = 121; # Fn+FK1
##    <VOL-> = 122; # Fn+FK2
##    <VOL+> = 123; # Fn+FK3
##    <MCMT> = 198; # Fn+FK4: Mic Mute
##    <BRT-> = 232; # Fn+FK5: Brightness Down
##    <BRT+> = 233; # Fn+FK6: Brightness Up
##    <DISP> = 235; # Fn+FK7: Display
##    # No key code for Fn+FK8
##    <PRSC> = 107; # Fn+FK9
##    <SNIP> = 157; # Fn+FK10
##    # No key code for Fn+FK11
##    <STAR> = 164; # Fn+FK12
##
##    # --------------------------------------------------------
##
##    <BKTK> =  49; # Backtick
##    <NUM1> =  10;
##    <NUM2> =  11;
##    <NUM3> =  12;
##    <NUM4> =  13;
##    <NUM5> =  14;
##    <NUM6> =  15;
##    <NUM7> =  16;
##    <NUM8> =  17;
##    <NUM9> =  18;
##    <NUM0> =  19;
##    <MNUS> =  20;
##    <EQUL> =  21;
##    <BKSP> =  22;
##
##    # --------------------------------------------------------
##
##    <TAB>  =  23; <FTAB> = 380; # Fn+TAB
##    <KP_Q> =  24;
##    <KP_W> =  25;
##    <KP_E> =  26;
##    <KP_R> =  27;
##    <KP_T> =  28;
##    <KP_Y> =  29;
##    <KP_U> =  30;
##    <KP_I> =  31;
##    <KP_O> =  32;
##    <KP_P> =  33; <PAUS> = 127; # Fn+p
##    <LBRK> =  34; # left bracket
##    <RBRK> =  35; # right bracket
##
##    # --------------------------------------------------------
##
##    <CAPS> =  66;
##    <KP_A> =  38;
##    <KP_S> =  39;
##    <KP_D> =  40;
##    <KP_F> =  41;
##    <KP_G> =  42;
##    <KP_H> =  43;
##    <KP_J> =  44;
##    <KP_K> =  45; <SCLK> = 78; # Fn+k
##
##    <KP_L> =  46;
##    <SEMI> =  47; # semicolon
##    <APOS> =  48; # apostrophe
##    <HASH> =  51;
##    <RTRN> =  36;
##
##    # --------------------------------------------------------
##
##    <LFSH> =  50; # left shift
##    <BKSL> =  94;
##    <KP_Z> =  52;
##    <KP_X> =  53;
##    <KP_C> =  54;
##    <KP_V> =  55;
##    <KP_B> =  56;
##    <KP_N> =  57;
##    <KP_M> =  58;
##    <COMM> =  59; # comma
##    <PERD> =  60; # period
##    <SLSH> =  61; # slash
##    <RTSH> =  62; <I210> = 210; # right shift; Fn+RShift
##
##    # --------------------------------------------------------
##
##    <LCTL> =  37;
##    <I151> = 151;
##    <LWIN> = 133;
##    <LALT> =  64;
##    <SPCE> =  65;
##    <RALT> = 108;
##    <RCTL> = 105;
##
##    <PGUP> = 112;
##    <UP>   = 111;
##    <PGDN> = 117;
##    <LEFT> = 113;
##    <DOWN> = 116;
##    <RGHT> = 114;
##
##    # --------------------------------------------------------
##
##      indicator 1 = "Caps Lock";
####      indicator 2 = "Num Lock";
####      indicator 3 = "Scroll Lock";
####      indicator 4 = "Compose";
####      indicator 5 = "Kana";
####      indicator 6 = "Sleep";
####      indicator 7 = "Suspend";
####      indicator 8 = "Mute";
####      indicator 9 = "Misc";
####      indicator 10 = "Mail";
####      indicator 11 = "Charging";
####      indicator 12 = "Shift Lock";
####      indicator 13 = "Group 2";
####      indicator 14 = "Mouse Keys";
##      alias <AC12> = <HASH>;
##      alias <ALGR> = <RALT>;
##      alias <MENU> = <COMP>;
##      alias <HZTG> = <BKTK>;
##      alias <LMTA> = <LWIN>;
##      alias <RMTA> = <RWIN>;
##      alias <OUTP> = <DISP>;
##      alias <KITG> = <I236>;
##      alias <KIDN> = <I237>;
##      alias <KIUP> = <I238>;
##      alias <I121> = <MUTE>;
##      alias <I122> = <VOL->;
##      alias <I123> = <VOL+>;
##      alias <I124> = <POWR>;
##      alias <I125> = <KPEQ>;
##      alias <I127> = <PAUS>;
##      alias <I130> = <HNGL>;
##      alias <I131> = <HJCV>;
##      alias <I132> = <AE13>;
##      alias <I133> = <LWIN>;
##      alias <I134> = <RWIN>;
##      alias <I135> = <COMP>;
##      alias <I136> = <STOP>;
##      alias <I137> = <AGAI>;
##      alias <I138> = <PROP>;
##      alias <I139> = <UNDO>;
##      alias <I140> = <FRNT>;
##      alias <I141> = <COPY>;
##      alias <I142> = <OPEN>;
##      alias <I143> = <PAST>;
##      alias <I144> = <FIND>;
##      alias <I145> =  <CUT>;
##      alias <I146> = <HELP>;
##      alias <I191> = <FK13>;
##      alias <I192> = <FK14>;
##      alias <I193> = <FK15>;
##      alias <I194> = <FK16>;
##      alias <I195> = <FK17>;
##      alias <I196> = <FK18>;
##      alias <I197> = <FK19>;
##      alias <I198> = <MCMT>;
##      alias <I199> = <FK21>;
##      alias <I200> = <FK22>;
##      alias <I201> = <FK23>;
##      alias <I202> = <FK24>;
##      alias <MDSW> = <LVL5>;
##      alias <KPPT> = <I129>;
##      alias <LatQ> = <KP_Q>;
##      alias <LatW> = <KP_W>;
##      alias <LatE> = <KP_E>;
##      alias <LatR> = <KP_R>;
##      alias <LatT> = <KP_T>;
##      alias <LatY> = <KP_Y>;
##      alias <LatU> = <KP_U>;
##      alias <LatI> = <KP_I>;
##      alias <LatO> = <KP_O>;
##      alias <LatP> = <KP_P>;
##      alias <LatA> = <KP_A>;
##      alias <LatS> = <KP_S>;
##      alias <LatD> = <KP_D>;
##      alias <LatF> = <KP_F>;
##      alias <LatG> = <KP_G>;
##      alias <LatH> = <KP_H>;
##      alias <LatJ> = <KP_J>;
##      alias <LatK> = <KP_K>;
##      alias <LatL> = <KP_L>;
##      alias <LatZ> = <KP_Z>;
##      alias <LatX> = <KP_X>;
##      alias <LatC> = <KP_C>;
##      alias <LatV> = <KP_V>;
##      alias <LatB> = <KP_B>;
##      alias <LatN> = <KP_N>;
##      alias <LatM> = <KP_M>;
##  };

xkb_types "(unnamed)" {

    virtual_modifiers NumLock,Alt,LevelThree,LevelFive,Meta,Super,Hyper,ScrollLock;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "ALPHABETIC" {
        # list of modifiers that may affect these keys
        modifiers= Shift+Lock;
        # which modifiers map to which level
        map[Shift]= Level2;
        map[Lock]= Level2;
        # per https://wiki.archlinux.org/title/X_keyboard_extension
        # these are not used and may be ignored
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift+NumLock;
        map[NumLock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
    type "PC_ALT_LEVEL2" {
        modifiers= Alt;
        map[Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt";
    };
    type "PC_SUPER_LEVEL2" {
        modifiers= Mod4;
        map[Mod4]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Super";
    };
    type "PC_CONTROL_LEVEL2" {
        modifiers= Control;
        map[Control]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Control";
    };
    type "CTRL+ALT" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[Shift]= Level2;
        preserve[Shift]= Shift;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        preserve[Shift+LevelThree]= Shift;
        map[Control+Alt]= Level5;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "Ctrl+Alt";
    };
    type "THREE_LEVEL" {
        modifiers= Shift+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Level3";
    };
    type "FOUR_LEVEL" {
      # the levels are:
      # 0: unmolested
      # 1: shift
      # 2: iso_level_3_shift(F12)
      # 3: iso_level_3_shift(F12)+shift

      modifiers= Shift+LevelThree;
      map[Shift]= Level2;
      map[LevelThree]= Level3;
      map[Shift+LevelThree]= Level4;
      level_name[Level1]= "Base";
      level_name[Level2]= "Shift";
      level_name[Level3]= "AltGr";
      level_name[Level4]= "Shift AltGr";
    };
    type "FOUR_LEVEL_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
    };
    type "FOUR_LEVEL_SEMIALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level4;
        preserve[Shift+Lock+LevelThree]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
    };
    type "FOUR_LEVEL_KEYPAD" {
        modifiers= Shift+NumLock+LevelThree;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[NumLock+LevelThree]= Level4;
        map[Shift+NumLock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift/Numlock";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift/Numlock AltGr";
    };
    type "FOUR_LEVEL_MIXED_KEYPAD" {
        modifiers= Shift+NumLock+LevelThree;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[NumLock+LevelThree]= Level3;
        map[Shift+NumLock+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
    };
    type "FOUR_LEVEL_X" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[LevelThree]= Level2;
        map[Shift+LevelThree]= Level3;
        map[Control+Alt]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "AltGr";
        level_name[Level3]= "Shift AltGr";
        level_name[Level4]= "Ctrl+Alt";
    };
    type "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level4;
        preserve[Lock]= Lock;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Caps / Shift AltGr";
    };
    type "FOUR_LEVEL_PLUS_LOCK" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock]= Level5;
        map[Shift+Lock]= Level2;
        map[Lock+LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "Lock";
    };
    type "EIGHT_LEVEL" {
        modifiers= Shift+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X AltGr";
        level_name[Level8]= "X Shift AltGr";
    };
    type "EIGHT_LEVEL_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[Lock+LevelFive]= Level6;
        map[Shift+Lock+LevelFive]= Level5;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[Lock+LevelThree+LevelFive]= Level8;
        map[Shift+Lock+LevelThree+LevelFive]= Level7;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X AltGr";
        level_name[Level8]= "X Shift AltGr";
    };
    type "EIGHT_LEVEL_SEMIALPHABETIC" {
        modifiers= Shift+Lock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level4;
        preserve[Shift+Lock+LevelThree]= Lock;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[Lock+LevelFive]= Level6;
        map[Shift+Lock+LevelFive]= Level5;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[Lock+LevelThree+LevelFive]= Level7;
        preserve[Lock+LevelThree+LevelFive]= Lock;
        map[Shift+Lock+LevelThree+LevelFive]= Level8;
        preserve[Shift+Lock+LevelThree+LevelFive]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X AltGr";
        level_name[Level8]= "X Shift AltGr";
    };
    type "EIGHT_LEVEL_WITH_LEVEL5_LOCK" {
        modifiers= Shift+NumLock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        preserve[Shift+LevelFive]= Shift;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[NumLock]= Level5;
        map[Shift+NumLock]= Level6;
        preserve[Shift+NumLock]= Shift;
        map[NumLock+LevelThree]= Level7;
        map[Shift+NumLock+LevelThree]= Level8;
        map[Shift+NumLock+LevelFive]= Level2;
        map[NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+NumLock+LevelThree+LevelFive]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X AltGr";
        level_name[Level8]= "X Shift AltGr";
    };
    type "EIGHT_LEVEL_ALPHABETIC_WITH_LEVEL5_LOCK" {
        modifiers= Shift+Lock+NumLock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        preserve[Shift+LevelFive]= Shift;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[NumLock]= Level5;
        map[Shift+NumLock]= Level6;
        preserve[Shift+NumLock]= Shift;
        map[NumLock+LevelThree]= Level7;
        map[Shift+NumLock+LevelThree]= Level8;
        map[Shift+NumLock+LevelFive]= Level2;
        map[NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+NumLock+LevelThree+LevelFive]= Level4;
        map[Lock]= Level2;
        map[Lock+LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level4;
        map[Lock+LevelFive]= Level5;
        map[Shift+Lock+LevelFive]= Level6;
        map[Lock+LevelThree+LevelFive]= Level7;
        map[Shift+Lock+LevelThree+LevelFive]= Level8;
        map[Lock+NumLock]= Level5;
        map[Shift+Lock+NumLock]= Level6;
        map[Lock+NumLock+LevelThree]= Level7;
        map[Shift+Lock+NumLock+LevelThree]= Level8;
        map[Lock+NumLock+LevelFive]= Level2;
        map[Lock+NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+Lock+NumLock+LevelThree+LevelFive]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr";
        level_name[Level4]= "Shift AltGr";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X AltGr";
        level_name[Level8]= "X Shift AltGr";
    };
    type "EIGHT_LEVEL_BY_CTRL" {
        modifiers= Shift+Lock+Control+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        map[Control]= Level5;
        map[Shift+Control]= Level6;
        map[Lock+Control]= Level6;
        map[Shift+Lock+Control]= Level5;
        map[Control+LevelThree]= Level7;
        map[Shift+Control+LevelThree]= Level8;
        map[Lock+Control+LevelThree]= Level8;
        map[Shift+Lock+Control+LevelThree]= Level7;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Level3";
        level_name[Level4]= "Shift Level3";
        level_name[Level5]= "Ctrl";
        level_name[Level6]= "Shift Ctrl";
        level_name[Level7]= "Level3 Ctrl";
        level_name[Level8]= "Shift Level3 Ctrl";
    };
    type "SHIFT+ALT" {
        modifiers= Shift+Alt;
        map[Shift+Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift+Alt";
    };
};

xkb_compatibility "(unnamed)" {

    virtual_modifiers NumLock,Alt,LevelThree,LevelFive,Meta,Super,Hyper,ScrollLock;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;
    interpret ISO_Level2_Latch+Exactly(Shift) {
        useModMapMods=level1;
        action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
    };
    interpret Shift_Lock+AnyOf(Shift+Lock) {
        action= LockMods(modifiers=Shift);
    };
    interpret Num_Lock+AnyOf(all) {
        virtualModifier= NumLock;
        action= LockMods(modifiers=NumLock);
    };
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelThree);
    };
    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_R+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_R+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_L+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_R+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=modMapMods);
    };
    interpret ISO_Level5_Shift+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelFive);
    };

    # Note that key+AnyOfOrNone(all) is equivalent to just key, but key is much
    # easier to read.
    interpret Mode_switch {
        action= SetGroup(group=+1);
    };
    interpret ISO_Level3_Shift {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch {
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock {
        action= LockMods(modifiers=LevelThree);
    };
    interpret ISO_Group_Latch {
        action= LatchGroup(group=2);
    };
    interpret ISO_Next_Group {
        action= LockGroup(group=+1);
    };
    interpret ISO_Prev_Group {
        action= LockGroup(group=-1);
    };
    interpret ISO_First_Group {
        action= LockGroup(group=1);
    };
    interpret ISO_Last_Group {
        action= LockGroup(group=2);
    };
    interpret KP_1 {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_End {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_2 {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_Down {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_3 {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_Next {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_4 {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_Left {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_6 {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_Right {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_7 {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_Home {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_8 {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_Up {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_9 {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_Prior {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_5 {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_Begin {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_F2 {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_Divide {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_F3 {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_Multiply {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_F4 {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Subtract {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Separator {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_Add {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_0 {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Insert {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Decimal {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret KP_Delete {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret F25 {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret F26 {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret F27 {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret F29 {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret F31 {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret F33 {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret F35 {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret Pointer_Button_Dflt {
        action= PtrBtn(button=default);
    };
    interpret Pointer_Button1 {
        action= PtrBtn(button=1);
    };
    interpret Pointer_Button2 {
        action= PtrBtn(button=2);
    };
    interpret Pointer_Button3 {
        action= PtrBtn(button=3);
    };
    interpret Pointer_DblClick_Dflt {
        action= PtrBtn(button=default,count=2);
    };
    interpret Pointer_DblClick1 {
        action= PtrBtn(button=1,count=2);
    };
    interpret Pointer_DblClick2 {
        action= PtrBtn(button=2,count=2);
    };
    interpret Pointer_DblClick3 {
        action= PtrBtn(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt {
        action= LockPtrBtn(button=default,affect=both);
    };
    interpret Pointer_Drag1 {
        action= LockPtrBtn(button=1,affect=both);
    };
    interpret Pointer_Drag2 {
        action= LockPtrBtn(button=2,affect=both);
    };
    interpret Pointer_Drag3 {
        action= LockPtrBtn(button=3,affect=both);
    };
    interpret Pointer_EnableKeys {
        action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext {
        action= SetPtrDflt(affect=button,button=+1);
    };
    interpret Pointer_DfltBtnPrev {
        action= SetPtrDflt(affect=button,button=-1);
    };
    interpret AccessX_Enable {
        action= LockControls(controls=AccessXKeys);
    };
    interpret AccessX_Feedback_Enable {
        action= LockControls(controls=AccessXFeedback);
    };
    interpret RepeatKeys_Enable {
        action= LockControls(controls=RepeatKeys);
    };
    interpret SlowKeys_Enable {
        action= LockControls(controls=SlowKeys);
    };
    interpret BounceKeys_Enable {
        action= LockControls(controls=BounceKeys);
    };
    interpret StickyKeys_Enable {
        action= LockControls(controls=StickyKeys);
    };
    interpret MouseKeys_Enable {
        action= LockControls(controls=MouseKeys);
    };
    interpret MouseKeys_Accel_Enable {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Overlay1_Enable {
        action= LockControls(controls=none);
    };
    interpret Overlay2_Enable {
        action= LockControls(controls=none);
    };
    interpret AudibleBell_Enable {
        action= LockControls(controls=AudibleBell);
    };
    interpret Terminate_Server {
        action= Terminate();
    };
    interpret Alt_L {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Meta_L {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Meta_R {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Super_L {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Super_R {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Hyper_L {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Hyper_R {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Shift_L {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret Shift_R {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret XF86Switch_VT_1 {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2 {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3 {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4 {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5 {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6 {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7 {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8 {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9 {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10 {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11 {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12 {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
    interpret XF86LogGrabInfo {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86LogWindowTree {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86Next_VMode {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret XF86Prev_VMode {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret ISO_Level5_Shift {
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch {
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock {
        action= LockMods(modifiers=LevelFive);
    };
    interpret Caps_Lock {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    indicator "Caps Lock" {
#        whichModState= Locked;
#        modifiers= Lock;
        whichModState= Any;
        modifiers= Shift;
    };
#    indicator "Num Lock" { whichModState= locked; modifiers= NumLock; };
#    indicator "Scroll Lock" { whichModState= locked; modifiers= ScrollLock; };
#    indicator "Shift Lock" { whichModState= locked; modifiers= Shift; };
#    indicator "Group 2" { groups= 0xfe; };
#    indicator "Mouse Keys" { controls= mouseKeys; };
};

xkb_symbols "lenovo thinkpad X1 carbon Gen12" {
  name[group1]="English (UK, QWERTY, F12, bottom-left backslash, w/ dead keys)";

  # --  <ESC> F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 <HOME> <END> <INS> <DEL> --
  #
  # -- 9(ESC),67-76(F1-F10),95-96(F11-F12),110(HOME),115(END),118(INS),119(DEL)

  # 121-123(Fn+F1-Fn+F3),198(Fn+F4),232(Fn+F5),233(Fn+F6),
  # 235(Fn+F7),NOTHING(Fn+F8),107(Fn+F9),157(Fn+F10),NOTHING(Fn+F11),164(Fn+F12)
  #
  # Fn+p: 127
  # Fn+TAB: 380
  # Fn+s: 64+107
  # Fn+k: 78
  # Fn+RShft: 210
  # Fn+B: 37+127
  # Fn+LShft: 50 (same as LShft)
  # Fn+Left:110
  # Fn+Right:115


  key <ESC>  { [ Escape ] };
  key <FK01> { type= "CTRL+ALT", symbols[Group1]= [ F1 , F1,  F1,  F1,  XF86Switch_VT_1  ] };
  key <FK02> { type= "CTRL+ALT", symbols[Group1]= [ F2 , F2,  F2,  F2,  XF86Switch_VT_2  ] };
  key <FK03> { type= "CTRL+ALT", symbols[Group1]= [ F3 , F3,  F3,  F3,  XF86Switch_VT_3  ] };
  key <FK04> { type= "CTRL+ALT", symbols[Group1]= [ F4 , F4,  F4,  F4,  XF86Switch_VT_4  ] };
  key <FK05> { type= "CTRL+ALT", symbols[Group1]= [ F5 , F5,  F5,  F5,  XF86Switch_VT_5  ] };
  key <FK06> { type= "CTRL+ALT", symbols[Group1]= [ F6 , F6,  F6,  F6,  XF86Switch_VT_6  ] };
  key <FK07> { type= "CTRL+ALT", symbols[Group1]= [ F7 , F7,  F7,  F7,  XF86Switch_VT_7  ] };
  key <FK08> { type= "CTRL+ALT", symbols[Group1]= [ F8 , F8,  F8,  F8,  XF86Switch_VT_8  ] };
  key <FK09> { type= "CTRL+ALT", symbols[Group1]= [ F9 , F9,  F9,  F9,  XF86Switch_VT_9  ] };
  key <FK10> { type= "CTRL+ALT", symbols[Group1]= [ F10, F10, F10, F10, XF86Switch_VT_10 ] };
  key <FK11> { type= "CTRL+ALT", symbols[Group1]= [ F11, F11, F11, F11, XF86Switch_VT_11 ] };
  key <FK12> { type= "CTRL+ALT", symbols[Group1]= [ F12, F12, F12, F12, XF86Switch_VT_12 ] };

  key <HOME> { [ Home   ] };
  key <END>  { [ End    ] };
  key <INS>  { [ Insert ] };
  key <DELE> { [ Delete ] };

  # -- ` 1234567890 -= <BSKP> --------------------------------------------------
  #
  # -- 49(`),10-22(1-0,-,=)

# key <BKTK> { type= "FOUR_LEVEL"           , symbols[Group1]= [ grave     , asciitilde , dead_grave          , dead_tilde      ]};
  key <BKTK> { type= "FOUR_LEVEL"           , symbols[Group1]= [ grave     , notsign    , bar                 , dead_tilde      ]};
  key <NUM1> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 1         , exclam,      exclamdown,           onesuperior     ]};
  key <NUM2> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 2         , at,          onehalf,              twosuperior     ]};
  key <NUM3> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 3         , numbersign,  sterling,             threesuperior   ]};
  key <NUM4> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 4         , dollar,      EuroSign,             dead_doubleacute]};
  key <NUM5> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 5         , percent,     currency,             dead_cedilla    ]};
  key <NUM6> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 6         , asciicircum, onequarter,           dead_circumflex ]};
  key <NUM7> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 7         , ampersand,   onethird,             dead_horn       ]};
  key <NUM8> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 8         , asterisk,    threequarters,        dead_ogonek     ]};
  key <NUM9> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 9         , parenleft,   leftsinglequotemark,  dead_breve      ]};
  key <NUM0> { type= "FOUR_LEVEL"           , symbols[Group1]= [ 0         , parenright,  rightsinglequotemark, dead_abovering  ]};
  key <APOS> { type= "FOUR_LEVEL"           , symbols[Group1]= [ minus     , underscore , yen                 , dead_belowdot   ]};
  key <RBRK> { type= "FOUR_LEVEL"           , symbols[Group1]= [ equal     , plus       , multiply            , division        ]};

  key <BKSP> { [ BackSpace, BackSpace ] };

  # -- <TAB> qwertuiop [] ------------------------------------------------------
  #
  # -- 23-35(TAB,q-l,[])

  key <TAB>  { [ Tab, ISO_Left_Tab ] };

  key <KP_X> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ q           , Q         , adiaeresis     , Adiaeresis          ]};
  key <COMM> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ w           , W         , aring          , Aring               ]};
  key <KP_D> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ e           , E         , eacute         , Eacute              ]};
  key <KP_O> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ r           , R         , registered     , trademark           ]};
  key <KP_K> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ t           , T         ,  thorn         , THORN               ]};
  key <KP_T> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ y           , Y         , udiaeresis     , Udiaeresis          ]};
  key <KP_F> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ u           , U         , uacute         , Uacute              ]};
  key <KP_G> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ i           , I         , iacute         , Iacute              ]};
  key <KP_S> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ o           , O         , oacute         , Oacute              ]};
  key <KP_R> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ p           , P         , odiaeresis     , Odiaeresis          ]};
  key <MNUS> { type= "FOUR_LEVEL"           , symbols[Group1]= [ bracketleft , braceleft , onefifth       , leftdoublequotemark ]};
  key <EQUL> { type= "FOUR_LEVEL"           , symbols[Group1]= [ bracketright, braceright, guillemotright , rightdoublequotemark]};

  # -- <CAPS> asdfghjkl;'# -----------------------------------------------------
  #
  # -- 66(CAPS),38-48(a-l,;,'),51(#),36(RTRN)


  key <CAPS> { type= "ONE_LEVEL", symbols[Group1]= [ Caps_Lock ], actions[Group1]= [ SetMods(modifiers=Control) ] };
#  key <CAPS> { [ Caps_Lock ] };

  key <KP_A> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ a           , A         , aacute         , Aacute              ]};
  key <SEMI> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ s           , S         , ssharp         , section             ]};
  key <KP_H> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ d           , D         ,    eth         , ETH                 ]};
  key <KP_Y> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ f           , F         , ediaeresis     , Ediaeresis          ]};
  key <KP_U> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ g           , G         , g              , G                   ]};
  key <KP_J> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ h           , H         , h              , H                   ]};
  key <KP_C> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ j           , J         , idiaeresis     , Idiaeresis          ]};
  key <KP_V> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ k           , K         , oe             , OE                  ]};
  key <KP_P> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ l           , L         , oslash         , Oslash              ]};

  key <KP_Z> { type= "FOUR_LEVEL"           , symbols[Group1]= [ semicolon   , colon     , paragraph      , degree              ]};
  key <LatQ> { type= "FOUR_LEVEL",            symbols[Group1]= [ apostrophe  , quotedbl  , dead_acute     , dead_diaeresis      ]};
  key <HASH> { type= "FOUR_LEVEL"           , symbols[Group1]= [ numbersign  , asciitilde, dead_grave     , dead_breve          ]};

  key <RTRN> { [ Return ] };

  # -- <LFSH> \zxcvbnm,./ <RTSH> -----------------------------------------------
  #
  # -- 50(LSHFT),94(BCKSLSH),52-62(z-m,,./RSHFT)

  key <LFSH> { [ Shift_L ] };

  key <BKSL> { type= "FOUR_LEVEL"           , symbols[Group1]= [ backslash, bar  , backslash     , bar         ] };

  key <SLSH> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ z        , Z    , ae            , AE          ] };
  key <KP_B> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ x        , X    , periodcentered, dead_stroke ] };
  key <KP_I> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ c         , C       , copyright     , cent           ]};
  key <PERD> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ v        , V    , v             , V           ] };
  key <KP_N> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ b        , B    , b             , B           ] };
  key <KP_L> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ n    , N         , ntilde    , Ntilde ] };
  key <KP_M> { type= "FOUR_LEVEL_ALPHABETIC", symbols[Group1]= [ m        , M    , mu            , plusminus   ] };

  key <KP_W> { type= "FOUR_LEVEL",            symbols[Group1]= [ comma     , less    , guillemotleft , dead_caron     ]};
  key <KP_E> { type= "FOUR_LEVEL",            symbols[Group1]= [ period    , greater , guillemotright, dead_abovedot  ]};
  key <LBRK> { type= "FOUR_LEVEL",            symbols[Group1]= [ slash     , question, questiondown  , dead_hook      ]};

  key <RTSH> { [ Shift_R ] };

  # -- <CTL> <FN> <SPR> <ALT> <SPACEBAR> <ALTGR> <CTL> (FNGR) ------------------
  #
  # -- 37(LCTL),151(FN),133(SUPER),64(ALT),65(SPACE),108(ALTGR),105(RCTL),112(PGUP),111(UP),117(PGDN),113(LEFT),116(DOWN),114(RGHT)

  key <LCTL> { [ Control_L     ] };
  # <FUNCTION>
  key <LWIN> { [ Super_L       ] };
  key <LALT> { [ Alt_L, Meta_L ] };
  key <SPCE> { [ space         ] };
  key <RALT> { type= "ONE_LEVEL", symbols[Group1]= [ Multi_key ] };
  key <RCTL> { [ Control_R     ] };

  # <PGUP> <UP> <PGDN> <LEFT> <DOWN> <RGHT> ----------------

  key <PGUP> { [ Prior ] };
  key  <UP>  { [ Up    ] };
  key <PGDN> { [ Next  ] };
  key <LEFT> { [ Left  ] };
  key <DOWN> { [ Down  ] };
  key <RGHT> { [ Right ] };

  # ----------------------------------------------------------------------------

    key <KPMU> {
        type= "CTRL+ALT",
        symbols[Group1]= [     KP_Multiply,     KP_Multiply,     KP_Multiply,     KP_Multiply,   XF86ClearGrab ]
    };

    key <NMLK> {         [        Num_Lock ] };
    key <SCLK> {         [     Scroll_Lock ] };
    key  <KP7> {         [         KP_Home,            KP_7 ] };
    key  <KP8> {         [           KP_Up,            KP_8 ] };
    key  <KP9> {         [        KP_Prior,            KP_9 ] };
    key <KPSU> {
        type= "CTRL+ALT",
        symbols[Group1]= [     KP_Subtract,     KP_Subtract,     KP_Subtract,     KP_Subtract,  XF86Prev_VMode ]
    };
    key  <KP4> {         [         KP_Left,            KP_4 ] };
    key  <KP5> {         [        KP_Begin,            KP_5 ] };
    key  <KP6> {         [        KP_Right,            KP_6 ] };
    key <KPAD> {
        type= "CTRL+ALT",
        symbols[Group1]= [          KP_Add,          KP_Add,          KP_Add,          KP_Add,  XF86Next_VMode ]
    };
    key  <KP1> {         [          KP_End,            KP_1 ] };
    key  <KP2> {         [         KP_Down,            KP_2 ] };
    key  <KP3> {         [         KP_Next,            KP_3 ] };
    key  <KP0> {         [       KP_Insert,            KP_0 ] };
    key <KPDL> {         [       KP_Delete,      KP_Decimal ] };
    key <LVL3> {         [ ISO_Level3_Shift ] };
    key <KATA> {         [        Katakana ] };
    key <HIRA> {         [        Hiragana ] };
    key <HENK> {         [     Henkan_Mode ] };
    key <HKTG> {         [ Hiragana_Katakana ] };
    key <MUHE> {         [        Muhenkan ] };
    key <KPEN> {         [        KP_Enter ] };


    key <RWIN> {         [         Super_R ] };
    key <KPDV> {
        type= "CTRL+ALT",
        symbols[Group1]= [       KP_Divide,       KP_Divide,       KP_Divide,       KP_Divide,      XF86Ungrab ]
    };
    key <PRSC> {
        type= "TWO_LEVEL",
        symbols[Group1]= [       ISO_Level3_Shift,       Multi_key ]
    };
    key <LNFD> {         [        Linefeed ] };
    key <MUTE> {         [   XF86AudioMute ] };
    key <VOL-> {         [ XF86AudioLowerVolume ] };
    key <VOL+> {         [ XF86AudioRaiseVolume ] };
    key <POWR> {         [    XF86PowerOff ] };
    key <KPEQ> {         [        KP_Equal ] };
    key <I126> {         [       plusminus ] };
    key <PAUS> {
        type= "PC_CONTROL_LEVEL2",
        symbols[Group1]= [           Pause,           Break ]
    };
    key <I128> {         [     XF86LaunchA ] };
    key <I129> {         [      KP_Decimal,      KP_Decimal ] };
    key <HNGL> {         [          Hangul ] };
    key <HJCV> {         [    Hangul_Hanja ] };
    key <COMP> {         [            Menu ] };
    key <STOP> {         [          Cancel ] };
    key <AGAI> {         [            Redo ] };
    key <PROP> {         [        SunProps ] };
    key <UNDO> {         [            Undo ] };
    key <FRNT> {         [        SunFront ] };
    key <COPY> {         [        XF86Copy ] };
    key <OPEN> {         [        XF86Open ] };
    key <PAST> {         [       XF86Paste ] };
    key <FIND> {         [            Find ] };
    key  <CUT> {         [         XF86Cut ] };
    key <HELP> {         [            Help ] };
    key <I147> {         [      XF86MenuKB ] };
    key <I148> {         [  XF86Calculator ] };
    key <I150> {         [       XF86Sleep ] };
    key <I151> {         [      XF86WakeUp ] };
    key <I152> {         [    XF86Explorer ] };
    key <I153> {         [        XF86Send ] };
    key <I155> {         [        XF86Xfer ] };
    key <I156> {         [     XF86Launch1 ] };
    key <SNIP> {         [     XF86Launch2 ] };
    key <I158> {         [         XF86WWW ] };
    key <I159> {         [         XF86DOS ] };
    key <I160> {         [ XF86ScreenSaver ] };
    key <I161> {         [ XF86RotateWindows ] };
    key <I162> {         [    XF86TaskPane ] };
    key <I163> {         [        XF86Mail ] };
    key <STAR> {         [   XF86Favorites ] };
    key <I165> {         [  XF86MyComputer ] };
    key <I166> {         [        XF86Back ] };
    key <I167> {         [     XF86Forward ] };
    key <I169> {         [       XF86Eject ] };
    key <I170> {         [       XF86Eject ] };
    key <I171> {         [   XF86AudioNext ] };
    key <I172> {         [   XF86AudioPlay,  XF86AudioPause ] };
    key <I173> {         [   XF86AudioPrev ] };
    key <I174> {         [   XF86AudioStop,       XF86Eject ] };
    key <I175> {         [ XF86AudioRecord ] };
    key <I176> {         [ XF86AudioRewind ] };
    key <I177> {         [       XF86Phone ] };
    key <I179> {         [       XF86Tools ] };
    key <I180> {         [    XF86HomePage ] };
    key <I181> {         [      XF86Reload ] };
    key <I182> {         [       XF86Close ] };
    key <I185> {         [    XF86ScrollUp ] };
    key <I186> {         [  XF86ScrollDown ] };
    key <I187> {         [       parenleft ] };
    key <I188> {         [      parenright ] };
    key <I189> {         [         XF86New ] };
    key <I190> {         [            Redo ] };
    key <FK13> {         [             F13 ] };
    key <FK14> {         [     XF86Launch5 ] };
    key <FK15> {         [     XF86Launch6 ] };
    key <FK16> {         [     XF86Launch7 ] };
    key <FK17> {         [     XF86Launch8 ] };
    key <FK18> {         [     XF86Launch9 ] };
    key <MCMT> {         [ XF86AudioMicMute ] };
    key <FK21> {         [ XF86TouchpadToggle ] };
    key <FK22> {         [  XF86TouchpadOn ] };
    key <FK23> {         [ XF86TouchpadOff ] };
    key <LVL5> {         [ ISO_Level5_Shift ] };
    key  <ALT> {         [        NoSymbol,           Alt_L ] };
    key <META> {         [        NoSymbol,          Meta_L ] };
    key <SUPR> {         [        NoSymbol,         Super_L ] };
    key <HYPR> {         [        NoSymbol,         Hyper_L ] };
    key <I208> {         [   XF86AudioPlay ] };
    key <I209> {         [  XF86AudioPause ] };
    key <I210> {         [     XF86Launch3 ] };
    key <I211> {         [     XF86Launch4 ] };
    key <I212> {         [     XF86LaunchB ] };
    key <I213> {         [     XF86Suspend ] };
    key <I214> {         [       XF86Close ] };
    key <I215> {         [   XF86AudioPlay ] };
    key <I216> {         [ XF86AudioForward ] };
    key <I218> {         [           Print ] };
    key <I220> {         [      XF86WebCam ] };
    key <I221> {         [ XF86AudioPreset ] };
    key <I223> {         [        XF86Mail ] };
    key <I224> {         [   XF86Messenger ] };
    key <I225> {         [      XF86Search ] };
    key <I226> {         [          XF86Go ] };
    key <I227> {         [     XF86Finance ] };
    key <I228> {         [        XF86Game ] };
    key <I229> {         [        XF86Shop ] };
    key <I231> {         [          Cancel ] };
    key <BRT-> {         [ XF86MonBrightnessDown ] };
    key <BRT+> {         [ XF86MonBrightnessUp ] };
    key <I234> {         [  XF86AudioMedia ] };
    key <DISP> {         [     XF86Display ] };
    key <I236> {         [ XF86KbdLightOnOff ] };
    key <I237> {         [ XF86KbdBrightnessDown ] };
    key <I238> {         [ XF86KbdBrightnessUp ] };
    key <I239> {         [        XF86Send ] };
    key <I240> {         [       XF86Reply ] };
    key <I241> {         [ XF86MailForward ] };
    key <I242> {         [        XF86Save ] };
    key <I243> {         [   XF86Documents ] };
    key <I244> {         [     XF86Battery ] };
    key <I245> {         [   XF86Bluetooth ] };
    key <I246> {         [        XF86WLAN ] };
    key <I247> {         [         XF86UWB ] };
    key <I249> {         [  XF86Next_VMode ] };
    key <I250> {         [  XF86Prev_VMode ] };
    key <I251> {         [ XF86MonBrightnessCycle ] };
    key <I252> {         [ XF86BrightnessAuto ] };
    key <I253> {         [  XF86DisplayOff ] };
    key <I254> {         [        XF86WWAN ] };
    key <I255> {         [      XF86RFKill ] };
    modifier_map Control { <LCTL> };
    modifier_map Control { <RCTL> };
    modifier_map Control { <CAPS> };

    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };

    modifier_map Mod1 { <LALT> };
    modifier_map Mod1 { <ALT> };
    modifier_map Mod1 { <META> };

    modifier_map Mod2 { <NMLK> };

    modifier_map Mod3 { <LVL5> };

    modifier_map Mod4 { <LWIN> };
    modifier_map Mod4 { <RWIN> };
    modifier_map Mod4 { <SUPR> };
    modifier_map Mod4 { <HYPR> };

    modifier_map Mod5 { <LVL3> };
};

};

# Local Variables:
# fill-column: 132
# End:
