{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE UnicodeSyntax #-}

import Base1

-- base --------------------------------

import Data.Char       ( chr, isSpace )
import Data.Functor    ( (<$) )
import Data.Maybe      ( catMaybes )
import Data.Monoid     ( mempty )
import System.Process  ( readProcess )
import Text.Read       ( read )

-- parsers -----------------------------

import Text.Parser.Char         ( CharParsing, alphaNum, char, digit, hexDigit
                                , noneOf, notChar, octDigit, oneOf, satisfy
                                , spaces, string )
import Text.Parser.Combinators  ( choice, count, optional, try )
import Text.Parser.Token        ( TokenParsing, braces, token )

-- text --------------------------------

import Data.Text     ( pack )
import Data.Text.IO  ( putStrLn )

-- trifecta ----------------------------

import Text.Trifecta.Parser  ( Parser, parseString )
import Text.Trifecta.Result  ( Result( Failure, Success ) )

--------------------------------------------------------------------------------

swaymsgPath โท String
swaymsgPath = "/run/current-system/sw/bin/swaymsg"

----------------------------------------

data InputType = Keyboard | TouchPad
  deriving Show

data InputCommands = InputId (String,String,String) | InputType InputType
  deriving Show

data AccelProfile = Adaptive | Flat
data Abled = Enabled | Disabled

ลง โท TokenParsing ฮท โ ๐ โ ฮท ๐
ลง = token โ string

ลฃ โท CharParsing ฮท โ ฮฑ โ ๐ โ ฮท ฮฑ
ลฃ a s = a <$ string s

(โ) โท CharParsing ฮท โ ฮฑ โ ๐ โ ฮท ฮฑ
(โ) a s = a <$ string s

upto โท โ โ Parser a โ Parser [a]
upto n p | n > 0 = (:) โณ try p โต (upto (n-1) p โค return [])
          | otherwise = return []
-- upto _ _ = return []

upto1 โท โ โ Parser a โ Parser [a]
upto1 n p | n > 0 = (:) โณ p โต upto (n-1) p
          | otherwise = return []
-- upto1 _ _ = return []

nonSpace โท CharParsing ฮท โ ฮท ๐
nonSpace = many โ satisfy $ not โ isSpace

nonSpace' โท TokenParsing ฮท โ ฮท ๐
nonSpace' = token nonSpace

abled โท Parser Abled
abled = choice [ Enabled โ "enabled", Disabled โ "disabled" ]

data InputSubCommands = XKBFile String
                      | IComment String
                      | AccelProfile AccelProfile
                      | DWT Abled
                      | ClickMethod ClickMethod

data ClickMethod = ClickNone | ButtonAreas | ClickFinger

clickMethod โท Parser ClickMethod
clickMethod = choice [ ClickNone โ "none"
                     , ButtonAreas โ "button_areas"
                     , ClickFinger โ "clickfinger"
                     ]

comment โท Parser String
comment = char '#' โซ many (noneOf "\n")


inputSubCommands โท Parser InputSubCommands
inputSubCommands =
  let accel_profile = choice [ Adaptive <$ string "adaptive"
                             , Flat <$ string "flat" ]
  in  choice [ XKBFile โณ (ลง "xkb_file" โซ nonSpace)
             , AccelProfile โณ (ลง "accel_profile" โซ accel_profile)
             , DWT โณ (ลง "dwt" โซ abled)
             , IComment โณ comment
             , ClickMethod โณ (ลง "click_method" โซ clickMethod)
             ]

input โท Parser InputCommands
input =
  let input_id = (string "type:" โซ choice [InputType Keyboard <$ string "keyboard"
                                          ,InputType TouchPad <$ string "touchpad"])
               โค (InputId โณ deviceIdentifier)
  in  ลง "input" โซ (token input_id โช braces (many $ token inputSubCommands))


deviceIdentifier โท Parser (String, String, String)
deviceIdentifier = (,,) โณ
  (many digit โช char ':') โต (many digit โช char ':') โต many (alphaNum โค oneOf "/:_")

inputCommand โท Parser InputCommands
inputCommand = input

data Font = Pango ๐ | NonPango ๐
  deriving Show

font โท Parser Font
font = token $ choice [ Pango โณ try (string "pango:" โซ nonSpace)
                      , NonPango โณ nonSpace ]

data NormalOrInverse = Normal | Inverse
  deriving Show

data Clause = Comment      ๐
            | InputCommand InputCommands
            | Font         Font
            | SetVariable  SetVariable
            | ExecAlways   Command
            | Output       ๐ Output
            | BindSym      BindSym
            | FloatingModifier ๐ NormalOrInverse
  deriving Show

data BindSym = BindSym' ๐ ๐
  deriving Show

normalOrInverse โท Parser NormalOrInverse
normalOrInverse = choice [ Normal โ "normal", Inverse โ "inverse" ]

floatingModifier โท Parser Clause
floatingModifier =
  FloatingModifier โณ (ลง "floating_modifier" โซ nonSpace') โต normalOrInverse

-- (shell parsing; note that sway just passes the whole line, including apparent
--  comments, to `sh`; thence, (ba)sh does any comment interpretation)

-- a '#', either starting a word or by itself, makes the rest of the line a
-- comment

-- command_comment โท Parser ๐ (๐ ๐)
-- command_comment = many (noneOf "\n#") -- # in a command is okay, probably

{- | Parse the rest of the line as a list of of words

-- a word is:
--  a quote-protected group (I'm unsure if \' protects an enclosed '; it is
--    difficult to test that on the comwand)
--  a double-quote protected group (\" protects an enclosed ")
--  a bareword not starting with a '#'
-}
restOfLine โท Parser [๐]
restOfLine =
  let dquoted_word =
        let dq_chars โท Parser ๐
            dq_chars = choice [ some (noneOf "\\\"\n")
                              , pure โณ (char '\\' โซ char '\\')
                              , (:) โณ char '\\' โต (pure โณ notChar '\n')
                              ]
        in  char '"' โซ (ั โณ many dq_chars) โช char '"'
      quoted_word  = char '\'' โซ many (notChar '\'') โช char '\''
      dollar_quoted_word =
        let o_word_3      = (:) โณ oneOf "0123" โต upto 2 octDigit
            o_8bit_string = try o_word_3 โค upto1 2 octDigit
            octal_8bit    = chr โ read โ ("0o" โ) โณ o_8bit_string
            read_hex      โท ๐ โ โ
            read_hex      = chr โ read โ ("0x" โ)
            hex_8bit      = read_hex โณ upto1 2 hexDigit
            hex_16bit     = read_hex โณ upto1 4 hexDigit

            chars =
              let nhex n = pure โ read_hex โณ upto1 n hexDigit
              in  choice [ some (noneOf "\'\\")
                         , char '\\' โซ choice [ char 'a' โซ pure "\BEL"
                                              , char 'b' โซ pure "\BS"
                                              , char 'e' โซ pure "\ESC"
                                              , char 'E' โซ pure "\ESC"
                                              , char 'f' โซ pure "\FF"
                                              , char 'n' โซ pure "\LF"
                                              , char 'r' โซ pure "\CR"
                                              , char 't' โซ pure "\HT"
                                              , char 'v' โซ pure "\VT"
                                              , pure โณ oneOf "'?\\\""
                                              , pure โณ octal_8bit
                                              , char 'x' โซ nhex 2
                                              , char 'u' โซ (pure โณ hex_16bit)
                                              ]
                           ]
        in  string "$'" โซ (ั โณ many chars) โช char '\''
  in  many โ token $ choice [ dquoted_word, quoted_word, dollar_quoted_word ]

{- | Note that sway doesn't do inline comments; however, the exec cmdline is
     passed to 'sh', which does -}
bindsym โท Parser BindSym
bindsym = BindSym' โณ nonSpace' โต (many (noneOf "\n"))

data SetVariable = SetV ๐ ๐
  deriving Show

setVariable โท Parser SetVariable
setVariable = SetV โณ token (char '$' โซ nonSpace) โต token (many (noneOf "\n"))

data Output = OutputBG ๐ ๐ ๐
  deriving Show

output โท Parser Output
output = choice [ OutputBG โ "bg" โต nonSpace' โต nonSpace' โต nonSpace'
                ]

newtype Command = Command ๐
  deriving Show

command โท Parser Command
command = Command โณ many (noneOf "\n")

clause โท Parser Clause
clause =  choice [ Comment      โณ ((token (char '#') โซ many (noneOf "#\n")))
                 , InputCommand โณ inputCommand
                 , Font         โณ (ลง "font" โซ font)
                 , SetVariable  โณ (ลง "set" โซ setVariable)
                 , ExecAlways   โณ (ลง "exec_always" โซ command)
                 , Output       โณ (ลง "output" โซ token nonSpace) โต output
                 , BindSym      โณ (ลง "bindsym" โซ bindsym)
                 , floatingModifier
                 ]

main โท IO ()
main = do
  cfg โ readProcess swaymsgPath [ "-t", "get_config", "--pretty" ] ""

  let prsr = spaces โซ (many $ token clause)
  let r = parseString prsr mempty cfg -- " # foo\n # bar"
  case r of
    Success s โ forM_ s (putStrLn โ pack โ show)
    Failure e โ putStrLn โ pack $ show e

-- that's all, folks! ----------------------------------------------------------
